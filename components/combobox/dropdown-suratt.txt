"use client";

import * as React from "react";
import { CheckIcon, ChevronsUpDownIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { fetchDataQuran } from "@/lib/quran";
import { cn } from "@/lib/utils";

export default function DropdownSurat({
  selectedSurah,
  onSurahChange,
}: {
  selectedSurah: string;
  onSurahChange: (value: string) => void;
}) {
  const [open, setOpen] = React.useState(false);
  const [value, setValue] = React.useState(selectedSurah);
  const [quranData, setQuranData] = React.useState<{ value: string; label: string }[]>([]);


    // // âœ… scroll lock perfect tp hrs pilih combobox dulu
    // React.useEffect(() => {
    //   if (open) {
    //     document.body.style.overflow = "hidden";
    //   } else {
    //     document.body.style.overflow = "";
    //   }
  
    //   return () => {
    //     document.body.style.overflow = "";
    //   };
    // }, [open]);


    React.useEffect(() => {
      // If it's open, lock the scroll
      if (open) {
        document.body.style.overflow = "hidden";
      }
    
      // If it's closing (open === false), delay a little before unlocking
      const timeout = setTimeout(() => {
        if (!open) {
          document.body.style.overflow = "";
        }
      }, 200); // you can increase this to 300-400ms if needed
    
      // Clean up when component unmounts or re-runs
      return () => {
        clearTimeout(timeout);
        document.body.style.overflow = "";
      };
    }, [open]);
    



  // Fetch Quran data
  React.useEffect(() => {
    const getData = async () => {
      const data = await fetchDataQuran();
      const formattedData = data.map((item) => ({
        value: item.nomor.toString(),
        label: item.namaLatin,
      }));
      setQuranData(formattedData);
    };
    getData();
  }, []);

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-[200px] justify-between"
        >
          {value
            ? quranData.find((item) => item.value === value)?.label
            : "Select Surah..."}
          <ChevronsUpDownIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>

      <PopoverContent
        forceMount
        className="w-[200px] p-0 pointer-events-auto z-[100]"
      >
        <Command>
          <CommandInput placeholder="Search Surah..." />

          <CommandList
            className="max-h-60 w-full overflow-y-auto touch-auto overscroll-auto"
            onWheel={() => console.log("scrolling!")}
          >
            <CommandEmpty>No surah found.</CommandEmpty>
            <CommandGroup>
              {quranData.map((item) => (
                <CommandItem
                  key={item.value}
                  value={item.value}
                  onSelect={(currentValue) => {
                    setValue(currentValue === value ? "" : currentValue);
                    onSurahChange(currentValue);
                    setOpen(false);
                  }}
                >
                  <CheckIcon
                    className={cn(
                      "mr-2 h-4 w-4",
                      value === item.value ? "opacity-100" : "opacity-0"
                    )}
                  />
                  {item.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}
